// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Space {
  id            String          @id @default(cuid())
  title         String
  description   String
  posts         Post[]
  users         User[]
  UsersOnSpaces UsersOnSpaces[]
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String?
  published   Boolean   @default(false)
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?
  comments    Comment[]
  upvoteCount Int       @default(0)
  space       Space?    @relation(fields: [spaceId], references: [id])
  spaceId     String?
}

model Comment {
  id          String  @id @default(cuid())
  content     String
  published   Boolean @default(false)
  author      User?   @relation(fields: [authorId], references: [id])
  authorId    String?
  post        Post?   @relation(fields: [postId], references: [id])
  postId      String?
  upvoteCount Int     @default(0)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @updatedAt @map(name: "updated_at")
  posts         Post[]
  comments      Comment[]
  spaces        Space?          @relation(fields: [spaceId], references: [id])
  spaceId       String?
  UsersOnSpaces UsersOnSpaces[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model UsersOnSpaces {
  space   Space  @relation(fields: [spaceId], references: [id])
  spaceId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@id([spaceId, userId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
